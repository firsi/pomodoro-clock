let number = 0;
let isSessionLength=false;
class Pomodoro extends React.Component {
  constructor(props){
    super(props);
    this.state ={
      breakLength:5,
      sessionLength:25,
      minutes:25,
      secondes:"00",
      playTimer:false,
      timeLabel:"Session"
    }
    this.url = "https://goo.gl/65cBl1";
    this.audio = new Audio(this.url);
    this.handleBreak = this.handleBreak.bind(this);
    this.handleSession = this.handleSession.bind(this);
    this.handleReset = this.handleReset.bind(this);
    this.handlePlay = this.handlePlay.bind(this);
  }
  
  handleReset(){
    this.setState({
      breakLength:5,
      sessionLength:25,
      minutes:25,
      secondes:"00",
      playTimer:false
    });
    number = 0;
  }
  handleBreak(event){
    if(event.currentTarget.id === "break-decrement"){
      if(this.state.breakLength > 1){
        this.setState({
        breakLength: this.state.breakLength - 1
      });
      }
      
    }
    else{
      if(this.state.breakLength <60){
      this.setState({
        breakLength: this.state.breakLength + 1
      })
    }}
  }
  handleSession(event){
    if(event.currentTarget.id === "session-decrement"){
      if(this.state.sessionLength > 1){
      
            this.setState({
            sessionLength: this.state.sessionLength - 1,
            minutes:this.state.minutes -1
          });
      }
      
    }
    else{
      if(this.state.sessionLength <60){
        this.setState({
        sessionLength: this.state.sessionLength + 1,
        minutes:this.state.minutes + 1
      });
      }
      
    }
  }
  handlePlay(event){
    this.setState({
      playTimer:!this.state.playTimer
    });
    console.log(this.state.playTimer);
  }
  componentDidMount() {
    
    this.interval = setInterval(() => {
      
        if(this.state.playTimer){
            if(number === 0){
              number = 60;
              this.setState({
                minutes:this.state.minutes - 1
              });
        }
        number = number - 1;
        this.setState({secondes:number});
      }
      
      
      if(this.state.minutes === 0 && this.state.secondes === 0){
        this.audio.play();
        if(!isSessionLength){
          this.setState({
                           minutes: this.state.breakLength,
                           secondes:"00",
                           timeLabel:"Break"
                          });
          isSessionLength = !isSessionLength;
        }
        else{
            this.setState({
                           minutes: this.state.sessionLength,
                           secondes:"00",
                           timeLabel:"Session"
                          });
          isSessionLength = !isSessionLength;
        }
              
      }
    
    }, 1000);
      
        
  
    
  
}
  componentWillUnmount() {
  clearInterval(this.interval);
}
  render(){
    return(<div class="container">
            <div class="row">
              <div class="col-sm-9 col-lg-6 column centerIt">
                <div class="pomodoro-container">
                  <h1 class="title text-center">Pomodoro Clock</h1>
                  <div id="settings-container">
                    <div class="row">
                      <div class="col">
                        <div class="break-container text-center">
                      <p id="break-label"> Break Length</p>
                       <button id="break-decrement" class="btn btn-link" onClick={this.handleBreak}><i class="fa fa-arrow-down"></i></button>
                      <span id="break-length">{this.state.breakLength}</span>
                      <button id="break-increment" class="btn btn-link"onClick={this.handleBreak}><i class="fa fa-arrow-up"></i></button>
                    </div></div>
                      <div class="col">
                       <div class="session-container text-center">
                        <p id="session-label"> Session Length</p>                     
                        <button id="session-decrement" class="btn btn-link" onClick={this.handleSession}><i class="fa fa-arrow-down"></i></button>
                        <span id="session-length">{this.state.sessionLength}</span>
                        <button id="session-increment" class="btn btn-link" onClick={this.handleSession}><i class="fa fa-arrow-up"></i></button>
                      </div> 
                      </div>
                      
                    
                   
                    </div>
                     
                  </div>
                  <Timer minutes={this.state.minutes} secondes={this.state.secondes} playTimer={this.state.playTimer} timeLabel={this.state.timeLabel}/>
                  <button id="start_stop" class="btn btn-link text-right" onClick={this.handlePlay}><i class="fa fa-play"></i><i class="fa  fa-pause"></i></button>
                  <button id="reset" class="btn btn-link text-left" onClick={this.handleReset}><i class="fas fa-undo"></i></button>
                  <p class="credit text-center">Designed and coded by Alex Gnakadja</p>
                </div>
              </div>
              </div>
            </div>)
  }
}

class Timer extends React.Component{
  constructor(props){
    super(props);
   
  }
  
  
  
  
  
  render(){
    return(<div class="timer-box text-center">
                    <p id="timer-label"> {this.props.timeLabel}</p>
                    <span id="time-left">{this.props.minutes} : {this.props.secondes}</span>
                  </div>)
  }
}

ReactDOM.render(<Pomodoro />, document.getElementById("root"));